#!/usr/bin/gjs

/*
 * This is a template/mockup of custom looking GJS application
 * Copyright (C) 2018 konkor <konkor.github.io>
 *
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

const Gtk = imports.gi.Gtk;
const GLib = imports.gi.GLib;
const Gio = imports.gi.Gio;
const Lang = imports.lang;
const System = imports.system;

const Gettext = imports.gettext.domain('org.konkor.onedown');
const _ = Gettext.gettext;

var Format = imports.format;
String.prototype.format = Format.format;

const MAXMIN = 1440;
const APPDIR = get_appdir ();
imports.searchPath.unshift(APPDIR);

let theme_gui = APPDIR + "/data/themes/default/gtk.css";
let cssp = null;

let DEBUG_LVL = 0;
let infobar_event = 0;
let clocks_event = 0;
let timedown = new Date (Date.now () + 90*60000);
let minutes = 90;
let options = "--down";

var shutdown_path = null;
var pkexec_path = null;
var installed = false;
var updated = false;

var CustomApplication = new Lang.Class ({
    Name: "CustomApplication",
    Extends: Gtk.Application,

    _init: function (args) {
        GLib.set_prgname ("onedown");
        this.parent ({
          application_id: "org.konkor.onedown.application",
          flags: Gio.ApplicationFlags.HANDLES_OPEN
        });
        GLib.set_application_name ("One Down");

        this.add_main_option (
          'debug', 0, GLib.OptionFlags.NONE, GLib.OptionArg.NONE,
          "Enable debugging messages", null
        );
        this.add_main_option (
          'verbose', 0, GLib.OptionFlags.NONE, GLib.OptionArg.NONE,
          "Enable verbose output", null
        );
        this.connect ('handle-local-options', this.on_local_options.bind (this));
    },

    on_local_options: function (app, options) {
        try {
          this.register (null);
        } catch (e) {
          print ("Failed to register: %s".format (e.message));
        return 1;
        }

        if (options.contains ("verbose")) {
          DEBUG_LVL = 1;
        }
        if (options.contains ("debug")) {
          DEBUG_LVL = 2;
        }

        return -1;
    },

    vfunc_startup: function() {
        this.parent();
        this.window = new Gtk.Window ();
        this.window.set_icon_name ("io.github.konkor.onedown");
        if (!this.window.icon) try {
          this.window.icon = Gtk.Image.new_from_file (APPDIR + "/data/icons/hicolor/scalable/apps/io.github.konkor.onedown.svg").pixbuf;
        } catch (e) {
          print (e.message);
        }
        this.add_window (this.window);
        this.initialize ();
        this.build ();
        this.window.connect ("destroy", this.on_destroy.bind (this));
    },

    vfunc_activate: function() {
        this.window.show_all ();
        this.window.present ();
    },

    on_destroy: function() {
        if (infobar_event) GLib.Source.remove (infobar_event);
        if (clocks_event) GLib.Source.remove (clocks_event);

        return true;
    },

    initialize: function() {
        pkexec_path = GLib.find_program_in_path ("pkexec");
        shutdown_path = GLib.find_program_in_path ("shutdown-onedown");
        installed = false; updated = false;
        if (!pkexec_path) throw "pkexec is not installed..."
        if (!shutdown_path) {
            shutdown_path = APPDIR + "/shutdown-onedown";
            if (!GLib.file_test (shutdown_path, GLib.FileTest.EXISTS))
                throw "Unable to locate onedown installation.";
        } else installed = true;
    },

    build: function() {
        this.window.set_default_size (640, 320);
        this.window.set_position (Gtk.WindowPosition.CENTER);
        Gtk.Settings.get_default().gtk_application_prefer_dark_theme = true;
        cssp = get_css_provider ();
        if (cssp) {
            Gtk.StyleContext.add_provider_for_screen (
                this.window.get_screen(), cssp, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
        }
        this.hb = new Gtk.HeaderBar ();
        this.hb.set_show_close_button (true);
        //this.hb.get_style_context ().add_class ("hb");
        this.window.set_titlebar (this.hb);

        this.run_button = new RunButton ();
        this.hb.add (this.run_button);
        
        this.home = new Gtk.Button ({always_show_image: true, label: "One Down Tilldawn", tooltip_text:"Home"});
        //this.home.image = Gtk.Image.new_from_file (APPDIR + "/data/icons/io.github.konkor.newstream.svg");
        //this.home.get_style_context ().add_class ("hb-button");
        this.home.set_relief (Gtk.ReliefStyle.NONE);
        //this.home.margin = 4;
        this.hb.add (this.home);
        this.home.connect ('clicked', () => {
          let app = Gio.AppInfo.get_default_for_uri_scheme ("https");
          app.launch_uris (["https://github.com/konkor/"], null);
        });
        
        this.menu_button = new Gtk.MenuButton ({tooltip_text:"Application Menu"});
        this.menu_button.image = Gtk.Image.new_from_file (APPDIR + "/data/icons/open-menu-symbolic.svg");
        this.menu_button.get_style_context ().add_class ("hb-button");
        this.menu_button.set_relief (Gtk.ReliefStyle.NONE);
        //this.menu_button.margin = 6;
        this.hb.pack_end (this.menu_button);

        let box = new Gtk.Box ({orientation:Gtk.Orientation.VERTICAL});
        //box.get_style_context ().add_class ("info-item");
        this.window.add (box);

        this.infobar = null;
        this.infobox = new Gtk.Box ({orientation:Gtk.Orientation.HORIZONTAL, margin:0});
        box.add (this.infobox);

        this.slider = new Slider ("Shutdown", "minutes", "Set the Shutdown Interval");
        box.pack_start (this.slider, false, false, 0);

        this.minutes = new Minutes (minutes);
        box.pack_start (this.minutes, false, false, 0);

        this.time = new Gtk.Label ({label: timedown.toLocaleString() });
        this.time.get_style_context ().add_class ("datetime");
        box.pack_start (this.time, false, false, 8);
        //this.date = new Gtk.Label ({label: d.toDateString() });
        //box.pack_start (this.date, true, true, 8);

        let mmenu = new Gtk.Menu (), mii, rmi, rgroup = [];

        mii = new Gtk.MenuItem ({label:"Shutdown type"});
        mii.sensitive = false;
        mmenu.add (mii);

        rmi = Gtk.RadioMenuItem.new_with_label (rgroup, "Shutdown");
        rgroup = rmi.get_group ();
        rmi.set_active (true);
        mmenu.add (rmi);
        rmi.connect ("toggled", (o)=>{
          if (o.active) options = "--down";
        });

        rmi = Gtk.RadioMenuItem.new_with_label (rgroup, "Power-off");
        rgroup = rmi.get_group ();
        mmenu.add (rmi);
        rmi.connect ("toggled", (o)=>{
          if (o.active) options = "--poweroff";
        });
        rmi = Gtk.RadioMenuItem.new_with_label (rgroup, "Halt");
        rgroup = rmi.get_group ();
        //rmi.set_active (false);
        mmenu.add (rmi);
        rmi.connect ("toggled", (o)=>{
          if (o.active) options = "--halt";
        });
        rmi = Gtk.RadioMenuItem.new_with_label (rgroup, "Reboot");
        rgroup = rmi.get_group ();
        mmenu.add (rmi);
        rmi.connect ("toggled", (o)=>{
          if (o.active) options = "--reboot";
        });

        mmenu.add (new Gtk.SeparatorMenuItem ());
        mii = new Gtk.MenuItem ({label:"About"});
        mmenu.add (mii);
        mii.connect ("activate", () => {this.about ()});

        mmenu.show_all ();
        this.menu_button.set_popup (mmenu);

        this.slider.slider.connect ('value_changed', (item) => {
          minutes = Math.floor (item.get_value()*MAXMIN);
          timedown = new Date (Date.now () + minutes*60000);
          this.minutes.value = minutes;
          this.time.set_text (timedown.toLocaleString());
        });
        this.run_button.connect ('toggled', this.on_run.bind (this));
        clocks_event = GLib.timeout_add (0, 500, () => {
            if (this.run_button.active) {
                this.minutes.value = Math.floor ( (timedown - Date.now ())/60000);
            } else {
                this.minutes.value = minutes;
                timedown = new Date (Date.now () + minutes*60000);
                this.time.set_text (timedown.toLocaleString());
            }
            return true;
        });
    },
    
    on_run: function (o) {
        GLib.spawn_command_line_sync ("%s %s --cancel --verbose".format (pkexec_path, shutdown_path));
        if (o.active) {
            try {
                GLib.spawn_command_line_sync ("%s %s %s --time=%s --verbose".format (pkexec_path, shutdown_path, options, minutes));
                this.show_info ("Shutdown is planned on " + timedown.toLocaleString() + " to " + options.substring (2));
            } catch (e) {
                this.show_message ("ERROR: Something wrong, check logs for detailed info.", Gtk.MessageType.ERROR, 10);
                print (e.msg);
            }
        } else this.show_info ("All planned shutdowns is canceled.");
    },

    about: function () {
      let dlg = new Gtk.AboutDialog ({
        transient_for: this.window,
        program_name: "One Down",
        copyright: "Copyright Â© 2020 konkor <konkor.github.io>",
        license_type: Gtk.License.GPL_3_0,
        authors: ["konkor"],
        website: "https://github.com/konkor/onedown",
        logo_icon_name: "io.github.konkor.onedown"
      });
      //logo: this.window.icon,
      dlg.set_logo (this.window.icon);
      dlg.run ();
      dlg.destroy ();
    },

    show_message: function (text, bar_type, timeout) {
        this.unschedule_message ();
        this.infobar = new Gtk.InfoBar ();
        if (bar_type == Gtk.MessageType.QUESTION) {
            this.infobar.add_button ("gtk-yes", Gtk.ResponseType.YES);
            this.infobar.add_button ("gtk-cancel", Gtk.ResponseType.CANCEL);
        } else {
            this.infobar.add_button ("gtk-close", Gtk.ResponseType.YES);
            this.infobar.set_default_response (Gtk.ResponseType.OK);
        }
        this.infobar.set_message_type (bar_type);
        var content = this.infobar.get_content_area ();
        content.add (new Gtk.Label ({label: text, use_markup:true, xalign:0.75}));

        this.infobox.add (this.infobar);
        this.infobar.show_all ();
        this.infobar.connect ('response', (o, e) => {
            //print (e, Gtk.ResponseType.YES, Gtk.ResponseType.OK);
            this.unschedule_message ();
        });
        if (timeout) infobar_event = GLib.timeout_add_seconds (0, timeout, () => {
            this.unschedule_message ();
            return false;
        });
    },

    unschedule_message: function () {
        if (infobar_event) GLib.Source.remove (infobar_event);
        infobar_event = 0;
        if (this.infobar) try {this.infobar.destroy ();}catch(e){}
        this.infobar = null;
        System.gc();
    },

    show_info: function (text) {
        this.show_message (text, Gtk.MessageType.INFO, 10);
    }
});

var RunButton = new Lang.Class({
    Name: 'RunButton',
    Extends: Gtk.ToggleButton,

    _init: function (text, tooltip, id) {
        this.parent ();
        this.image = Gtk.Image.new_from_icon_name ("system-shutdown-symbolic", Gtk.IconSize.LARGE_TOOLBAR);
        this.xalign = 0;
        this.get_style_context ().add_class ("suggested-action");
        this.on_toggle ();
        this.show_all ();

        this.connect ('toggled', this.on_toggle.bind (this));
    },

    on_toggle: function () {
        if (this.active) this.tooltip_text = _("Cancel Shutdown");
        else this.tooltip_text = _("Schedule Shutdown");
    }
});

var Slider = new Lang.Class({
  Name: "Slider",
  Extends: Gtk.Box,

  _init: function (text, info, tooltip) {
    this.parent ({orientation:Gtk.Orientation.VERTICAL, margin:16});
    this.margin_left = 16;
    this.get_style_context ().add_class ("slider-item");
    this.tooltip_text = tooltip;

    let box = new Gtk.Box ({orientation:Gtk.Orientation.HORIZONTAL});
    box.get_style_context ().add_class ("info-item");
    this.add (box);
    this.label = new Gtk.Label ({label:"<b>"+text+"</b>", use_markup:true, xalign:0});
    box.pack_start (this.label, true, true, 0);
    this.info = new Gtk.Label ({label:"<i>" + info + "</i>", use_markup:true});
    box.pack_end (this.info, false, false, 0);
    this.slider = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0, 1, 1/MAXMIN);
    this.get_style_context ().add_class ("slider");
    this.slider.set_value (90/MAXMIN);
    this.slider.draw_value = false;
    this.add (this.slider);

    this.slider.connect ("scroll-event", (o) => {
      GObject.signal_stop_emission_by_name (o, "scroll-event");
      return false;
    });

    this.show_all ();
  },

  update_info: function (info) {
    this.info.set_markup ("<i>" + info + "</i>");
  }
});

var Minutes = new Lang.Class({
  Name: "Minutes",
  Extends: Gtk.Box,

  _init: function (minutes) {
    this.parent ({orientation:Gtk.Orientation.HORIZONTAL, margin:8});
    this.get_style_context ().add_class ("minutes");
    this.tooltip_text = _("Time Before Shutdown");

    this.label = new Gtk.Label ({label:"<b>90</b> <i>minutes</i>", use_markup:true});
    this.pack_start (this.label, true, true, 8);
    this.value = minutes;

    this.show_all ();
  },
  
  set value (v) {
    if (!Number.isInteger (v)) return;
    this.label.set_markup ("<b>" + v +"</b> <i>" + _("minutes") + "</i>");
  }
});

function get_css_provider () {
    let cssp = new Gtk.CssProvider ();
    let css_file = Gio.File.new_for_path (theme_gui);
    try {
        cssp.load_from_file (css_file);
    } catch (e) {
        debug (e);
        cssp = null;
    }
    return cssp;
}

function info (msg) {
    if (DEBUG_LVL > 0) print (msg);
}

function debug (msg) {
    if (DEBUG_LVL > 1) print (msg);
}

function getCurrentFile () {
    let stack = (new Error()).stack;
    let stackLine = stack.split("\n")[1];
    if (!stackLine)
        throw new Error ("Could not find current file");
    let match = new RegExp ("@(.+):\\d+").exec(stackLine);
    if (!match)
        throw new Error ("Could not find current file");
    let path = match[1];
    let file = Gio.File.new_for_path (path);
    return [file.get_path(), file.get_parent().get_path(), file.get_basename()];
}

function get_appdir () {
    let s = getCurrentFile ()[1];
    if (GLib.file_test (s + "/konkor.onedown.policy", GLib.FileTest.EXISTS)) return s;
    s = GLib.get_home_dir () + "/.local/share/onedown";
    if (GLib.file_test (s + "/konkor.onedown.policy", GLib.FileTest.EXISTS)) return s;
    s = "/usr/local/share/onedown";
    if (GLib.file_test (s + "/konkor.onedown.policy", GLib.FileTest.EXISTS)) return s;
    s = "/usr/share/onedown";
    if (GLib.file_test (s + "/konkor.onedown.policy", GLib.FileTest.EXISTS)) return s;
    throw "OneDown installation not found...";
    return s;
}

ARGV.unshift (System.programInvocationName);

let app = new CustomApplication (ARGV);
app.run (ARGV);
